# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from pyexpat import model

from PyQt5 import QtCore, QtGui, QtWidgets
import sys

from PyQt5 import QtCore, QtWidgets
from PyQt5 import QtGui
from PyQt5.QtCore import Qt
from PyQt5.QtGui import *
from PyQt5.QtGui import QPalette, QPixmap  # 导入QTGUI模块
from PyQt5.QtWidgets import *
from query_request import  *


class Ui_MainWindow(object):
  def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(960, 786)
        MainWindow.setMinimumSize(QtCore.QSize(960, 786))
        MainWindow.setMaximumSize(QtCore.QSize(960, 786))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_title_img = QtWidgets.QLabel(self.centralwidget)
        self.label_title_img.setGeometry(QtCore.QRect(0, 0, 960, 141))

        title_img =QPixmap('img/img1.png')#打开顶部图片
        self.label_title_img.setPixmap(title_img) #Z设置调色板

        self.label_title_img.setText("")
        self.label_title_img.setObjectName("label_title_img")
        self.widget_query = QtWidgets.QWidget(self.centralwidget)
        self.widget_query.setGeometry(QtCore.QRect(0, 141, 960, 80))

        self.widget_query.setAutoFillBackground(True)  #开启自动填充背景
        self.widget_query.setObjectName("widget_query")


        palette =QPalette()  #调色板类
        palette.setBrush(QPalette.Background,QtGui.QBrush(QtGui.QPixmap('img/img2.png')))
        self.widget_query.setPalette(palette)

        self.widget_query.setObjectName("widget_query")
        self.label = QtWidgets.QLabel(self.widget_query)
        self.label.setGeometry(QtCore.QRect(30, 30, 54, 13))
        self.label.setObjectName("label")
        self.textEdit = QtWidgets.QTextEdit(self.widget_query)
        self.textEdit.setGeometry(QtCore.QRect(90, 20, 104, 31))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.widget_query)
        self.textEdit_2.setGeometry(QtCore.QRect(270, 20, 104, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_2 = QtWidgets.QLabel(self.widget_query)
        self.label_2.setGeometry(QtCore.QRect(210, 30, 54, 13))
        self.label_2.setObjectName("label_2")
        self.textEdit_3 = QtWidgets.QTextEdit(self.widget_query)
        self.textEdit_3.setGeometry(QtCore.QRect(450, 20, 104, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_3 = QtWidgets.QLabel(self.widget_query)
        self.label_3.setGeometry(QtCore.QRect(390, 30, 54, 13))
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(self.widget_query)
        self.pushButton.setGeometry(QtCore.QRect(720, 20, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.widget_query_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_query_2.setGeometry(QtCore.QRect(0, 220, 960, 71))
        self.widget_query_2.setObjectName("widget_query_2")
        self.label_4 = QtWidgets.QLabel(self.widget_query_2)
        self.label_4.setGeometry(QtCore.QRect(30, 0, 71, 31))
        self.label_4.setObjectName("label_4")
        self.checkBox = QtWidgets.QCheckBox(self.widget_query_2)
        self.checkBox.setGeometry(QtCore.QRect(110, 0, 91, 31))
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.widget_query_2)
        self.checkBox_2.setGeometry(QtCore.QRect(220, 0, 91, 31))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(self.widget_query_2)
        self.checkBox_3.setGeometry(QtCore.QRect(330, 0, 91, 31))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_4 = QtWidgets.QCheckBox(self.widget_query_2)
        self.checkBox_4.setGeometry(QtCore.QRect(440, 0, 91, 31))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_5 = QtWidgets.QCheckBox(self.widget_query_2)
        self.checkBox_5.setGeometry(QtCore.QRect(560, 0, 91, 31))
        self.checkBox_5.setObjectName("checkBox_5")
        self.label_title_img_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_title_img_2.setGeometry(QtCore.QRect(0, 290, 960, 61))
        self.label_title_img_2.setText("")
        self.label_title_img_2.setObjectName("label_title_img_2")

        train_img = QPixmap('img/img4.png')
        self.label_title_img_2.setPixmap(train_img)


        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(0, 350, 960, 441))
        self.tableView.setObjectName("tableView")

        self.model =QStandardItemModel();
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableView.horizontalHeader().setVisible(False)
        self.tableView.verticalHeader().setVisible(False)
        font= QtGui.QFont()
        font.setPointSize(8)
        self.tableView.setFont(font)
        self.tableView.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tableView.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)


        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

  def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "快手爬票"))
        self.label.setText(_translate("MainWindow", "出发地:"))
        self.label_2.setText(_translate("MainWindow", "目的地:"))
        self.label_3.setText(_translate("MainWindow", "出发日:"))
        self.pushButton.setText(_translate("MainWindow", "查询"))
        self.label_4.setText(_translate("MainWindow", "车次类型:"))
        self.checkBox.setText(_translate("MainWindow", "GC-高铁"))
        self.checkBox_2.setText(_translate("MainWindow", "D-动车"))
        self.checkBox_3.setText(_translate("MainWindow", "Z-直达"))
        self.checkBox_4.setText(_translate("MainWindow", "T-特快"))
        self.checkBox_5.setText(_translate("MainWindow", "K-快速"))
        self.textEdit_3.setText(str(get_time()))
        self.pushButton.clicked.connect(self.on_click)
        self.checkBox.stateChanged.connect(self.change_G)
        self.checkBox_2.stateChanged.connect(self.change_D)
        self.checkBox_3.stateChanged.connect(self.change_Z)
        self.checkBox_4.stateChanged.connect(self.change_T)
        self.checkBox_5.stateChanged.connect(self.change_K)

  def checkBox_default(self):
    self.checkBox.setChecked(False)
    self.checkBox_2.setChecked(False)
    self.checkBox_3.setChecked(False)
    self.checkBox_4.setChecked(False)
    self.checkBox_5.setChecked(False)
  def on_click(self):
    get_from=self.textEdit.toPlainText()
    get_to =self.textEdit_2.toPlainText()
    get_date= self.textEdit_3.toPlainText()
    if isStations()==True:
        stations=eval(read())

        if get_from !="" and get_to !="" and get_date!="":

           if get_from in stations and get_to in stations and is_valid_date(get_date):
              inputYesterDay=time.strptime(get_date,"%Y-%m-%d").tm_yday
              yearToday = time.localtime(time.time()).tm_yday
              timeDifference= inputYesterDay-yearToday
              if timeDifference>=0 and timeDifference<=28:
                  from_station= stations[get_from]
                  print(from_station)
                  to_station=stations[get_to]
                  data= query(get_date,from_station,to_station)
                  self.checkBox_default()
                  if len(data)!=0:
                      self.displayTable(len(data),16,data)
                  else:
                      self.messageDialog('警告','没有返回的网络数据')
              else:
                  self.messageDialog('警告','超出查询日期,不可查询昨天的车票日期')
           else:
                 self.messageDialog('警告','输入的站名不存在，或者输入日期格式不正确')
        else:
            self.messageDialog('警告','请填写车站名称')
    else:
        self.messageDialog('警告','未下载查询文件')
  def change_G(self,state):
     if state==QtCore.Qt.Checked:
        g_vehicle()
        self.displayTable(len(type_data),16,type_data)
     else:
        r_g_vehicle()
        self.displayTable(len(type_data),16,type_data)
  def change_D(self,state):
     if state==QtCore.Qt.Checked:
        d_vehicle()
        self.displayTable(len(type_data),16,type_data)
     else:
        r_d_vehicle()
        self.displayTable(len(type_data),16,type_data)

  def change_Z(self,state):
     if state==QtCore.Qt.Checked:
        z_vehicle()
        self.displayTable(len(type_data),16,type_data)
     else:
        r_z_vehicle()
        self.displayTable(len(type_data),16,type_data)
  def change_T(self,state):
     if state==QtCore.Qt.Checked:
        t_vehicle()
        self.displayTable(len(type_data),16,type_data)
     else:
        r_t_vehicle()
        self.displayTable(len(type_data),16,type_data)
  def change_K(self,state):
     if state==QtCore.Qt.Checked:
        k_vehicle()
        self.displayTable(len(type_data),16,type_data)
     else:
        r_k_vehicle()
        self.displayTable(len(type_data),16,type_data)


  def messageDialog(self,title,message):
    msg_box=QMessageBox(QMessageBox.Warning,title,message)
    msg_box.exec_()

  def displayTable(self,train,info,data):
    self.model.clear()
    for row in range(train):

        for column in range(info):
            item=QStandardItem(data[row][column])
            self.model.setItem(row,column,item)
    self.tableView.setModel(self.model)


import time
def get_time():
    now=int(time.time())
    timeStruct = time.localtime(now)
    strTime= time.strftime("%Y-%m-%d",timeStruct)

    return strTime
def is_valid_date(str):
    try:
        time.strptime(str,"%Y-%m-%d")
        return True
    except:
        return False
def show_MainWindow():
    app=QtWidgets.QApplication(sys.argv)   #实例化QApplication类，作为GUI主程序的入口
    MainWindow =QtWidgets.QMainWindow()   #创建QMainWindow
    ui =Ui_MainWindow()    #实例UI类
    ui.setupUi(MainWindow)   #设置窗体UI
    MainWindow.show()    #显示窗体
    sys.exit(app.exec_())    #当窗体创建完成以后，需要结束主循环
from getstations import *
if __name__ == '__main__' :

     if isStations()== False:
         getstations()
         show_MainWindow()
     else:
         show_MainWindow()
